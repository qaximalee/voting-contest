package com.ihsinformatics.practice5.entrypoint;

/*
 * I will output the Results and File of Each Jury's Data
 * */
import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FileGenerator {

	/*
	 * This method Do the whole Result printing job.
	 * 
	 * @param String this param takes maximum vote getting by a country
	 * 
	 * @param Map<String, Integer> it takes the Contestant Data
	 * 
	 * @param List<Map<String, Integer>> it takes all data getting by every files
	 * 
	 * @param String[] contestant countries names
	 */
	public void generateResultFile(String maxVoteCountry, Map<String, Integer> map, List<Map<String, Integer>> voteData,
			String[] contestantCountries) {
		// TODO Auto-generated method stub
		// Get the file reference
		Path path = Paths.get("D:\\Voting Results.txt");

		// Use try-with-resource to get auto-closeable writer instance
		try (BufferedWriter writer = Files.newBufferedWriter(path)) {

			writer.write("Voting Report\n" + "Voting was legal, no rules were violated.\n"
					+ "All the juries voted for 5 contestants.\n" + "No jury gave its own contestant any votes.\n\n"
					+ "The winner of the contest is " + maxVoteCountry + "\n" + "The winner contestant from "
					+ maxVoteCountry + " received a total of " + map.get(maxVoteCountry) + " votes.\n"
					+ "The winner contestant from " + maxVoteCountry + " received votes as follows.\n");

			for (int i = 0; i < voteData.size(); i++) {
				if (voteData.get(i).get(maxVoteCountry) > 0) {
					writer.write(contestantCountries[i] + "\t\t" + voteData.get(i).get(maxVoteCountry) + " votes\n");
				}
			}

			writer.write("\n\nRankings:\n");
			Map<String, Integer> mapCopied = new HashMap<>(map);
			printRanking(mapCopied, writer);

			writer.write("\nEnd of voting report.");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/*
	 * This method is used in only in this Class so It is private. It will print
	 * Rankings in Result File which will be generated by above method.
	 * 
	 * @param Map<String, Integer> this param takes data of each country with the
	 * total vote
	 * 
	 * @param BuffereWriter it is for printing output in file
	 */
	private void printRanking(Map<String, Integer> voteData, BufferedWriter writer) {
		// TODO Auto-generated method stub

		int voteDataSize = 5 + voteData.size() - voteData.size();

		for (int i = 0; i < voteDataSize; i++) {
			String key = Collections.max(voteData.entrySet(), Comparator.comparingInt(Map.Entry::getValue)).getKey();
			try {
				writer.write((i + 1) + ". " + key + "\t" + voteData.get(key) + "\n");
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			voteData.remove(key);
		}
	}

	/*
	 * This method is generating each Jury's Voted File
	 * 
	 * @param String it take the Jury's Country Name
	 * 
	 * @param Map<String, Integer> it takes Vote given by Jury to other Contestants
	 * 
	 * @param String[] it takes Contestants countries
	 */
	public void outputVoteFile(String votingCountry, Map<String, Integer> contestentCountry,
			String[] contestantCountries) {

		// Get the file reference
		Path path = Paths.get("D:\\" + votingCountry + ".txt");

		// Use try-with-resource to get auto-closeable writer instance
		try (BufferedWriter writer = Files.newBufferedWriter(path)) {
			for (int i = 0; i < contestentCountry.size(); i++) {
				writer.write(votingCountry + "\t" + contestantCountries[i] + "\t"
						+ contestentCountry.get(contestantCountries[i]) + "\n");
			}

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
